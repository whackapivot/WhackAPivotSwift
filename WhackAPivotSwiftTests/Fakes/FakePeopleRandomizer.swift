import Foundation

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

@testable import WhackAPivotSwift

class FakePeopleRandomizer : PeopleRandomizer, Equatable {
    init() {
    }

    private(set) var getRandomSubsetCallCount : Int = 0
    var getRandomSubsetStub : ((Int, [Person], Set<Person>) -> (PeopleChoicesAndTarget))?
    private var getRandomSubsetArgs : Array<(Int, [Person], Set<Person>)> = []
    func getRandomSubsetReturns(stubbedValues: (PeopleChoicesAndTarget)) {
        self.getRandomSubsetStub = {(ofSize: Int, people: [Person], peopleToAvoid: Set<Person>) -> (PeopleChoicesAndTarget) in
            return stubbedValues
        }
    }
    func getRandomSubsetArgsForCall(callIndex: Int) -> (Int, [Person], Set<Person>) {
        return self.getRandomSubsetArgs[callIndex]
    }
    func getRandomSubset(ofSize ofSize: Int, from people: [Person], avoiding peopleToAvoid: Set<Person>) -> (PeopleChoicesAndTarget) {
        self.getRandomSubsetCallCount += 1
        self.getRandomSubsetArgs.append((ofSize, people, peopleToAvoid))
        return self.getRandomSubsetStub!(ofSize, people, peopleToAvoid)
    }

    static func reset() {
    }
}

func == (a: FakePeopleRandomizer, b: FakePeopleRandomizer) -> Bool {
    return a === b
}