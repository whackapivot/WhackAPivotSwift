import Foundation

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

@testable import WhackAPivotSwift
class FakePeopleService : PeopleService, Equatable {
    init() {
    }

    private(set) var assemblePeopleCallCount : Int = 0
    var assemblePeopleStub : ((() -> ()) -> ())?
    private var assemblePeopleArgs : Array<(() -> ())> = []
    func assemblePeopleReturns(stubbedValues: ()) {
        self.assemblePeopleStub = {(completion: () -> ()) -> () in
            return stubbedValues
        }
    }
    func assemblePeopleArgsForCall(callIndex: Int) -> (() -> ()) {
        return self.assemblePeopleArgs[callIndex]
    }
    func assemblePeople(completion: () -> ()) -> () {
        self.assemblePeopleCallCount += 1
        self.assemblePeopleArgs.append((completion))
        return self.assemblePeopleStub!(completion)
    }

    private(set) var getPeopleCallCount : Int = 0
    var getPeopleStub : (() -> ([Person]
))?
    func getPeopleReturns(stubbedValues: ([Person]
)) {
        self.getPeopleStub = {() -> ([Person]
) in
            return stubbedValues
        }
    }
    func getPeople() -> ([Person]
) {
        self.getPeopleCallCount += 1
        return self.getPeopleStub!()
    }

    static func reset() {
    }
}

func == (a: FakePeopleService, b: FakePeopleService) -> Bool {
    return a === b
}