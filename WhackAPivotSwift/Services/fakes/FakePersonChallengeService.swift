import Foundation

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakePersonChallengeService : PersonChallengeService, Equatable {
    init() {
    }

    private(set) var startNewGameCallCount : Int = 0
    private var startNewGameArgs : Array<([Person], Int)> = []
    func startNewGameArgsForCall(callIndex: Int) -> ([Person], Int) {
        return self.startNewGameArgs[callIndex]
    }
    func startNewGame(people: [Person], peoplePerChallenge: Int) {
        self.startNewGameCallCount += 1
        self.startNewGameArgs.append((people, peoplePerChallenge))
    }

    private(set) var getChallengeCallCount : Int = 0
    var getChallengeStub : (() -> (PersonChallenge?))?
    func getChallengeReturns(stubbedValues: (PersonChallenge?)) {
        self.getChallengeStub = {() -> (PersonChallenge?) in
            return stubbedValues
        }
    }
    func getChallenge() -> (PersonChallenge?) {
        self.getChallengeCallCount += 1
        return self.getChallengeStub!()
    }

    static func reset() {
    }
}

func == (a: FakePersonChallengeService, b: FakePersonChallengeService) -> Bool {
    return a === b
}